// This file was auto generated by StructMembers.py, 
// when making changes to this file, please do it through that script to preserve them


#define STRUCT_MEMBERS_1(Struct, _m0) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
	}))


#define STRUCT_MEMBERS_2(Struct, _m0, _m1) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
	}))


#define STRUCT_MEMBERS_3(Struct, _m0, _m1, _m2) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
	}))


#define STRUCT_MEMBERS_4(Struct, _m0, _m1, _m2, _m3) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
	}))


#define STRUCT_MEMBERS_5(Struct, _m0, _m1, _m2, _m3, _m4) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
	}))


#define STRUCT_MEMBERS_6(Struct, _m0, _m1, _m2, _m3, _m4, _m5) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
		new VirtualVariable<decltype(Struct::_m5)>(offsetof(Struct, Struct::_m5)), \
	}))


#define STRUCT_MEMBERS_7(Struct, _m0, _m1, _m2, _m3, _m4, _m5, _m6) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
		new VirtualVariable<decltype(Struct::_m5)>(offsetof(Struct, Struct::_m5)), \
		new VirtualVariable<decltype(Struct::_m6)>(offsetof(Struct, Struct::_m6)), \
	}))


#define STRUCT_MEMBERS_8(Struct, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
		new VirtualVariable<decltype(Struct::_m5)>(offsetof(Struct, Struct::_m5)), \
		new VirtualVariable<decltype(Struct::_m6)>(offsetof(Struct, Struct::_m6)), \
		new VirtualVariable<decltype(Struct::_m7)>(offsetof(Struct, Struct::_m7)), \
	}))


#define STRUCT_MEMBERS_9(Struct, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
		new VirtualVariable<decltype(Struct::_m5)>(offsetof(Struct, Struct::_m5)), \
		new VirtualVariable<decltype(Struct::_m6)>(offsetof(Struct, Struct::_m6)), \
		new VirtualVariable<decltype(Struct::_m7)>(offsetof(Struct, Struct::_m7)), \
		new VirtualVariable<decltype(Struct::_m8)>(offsetof(Struct, Struct::_m8)), \
	}))


#define STRUCT_MEMBERS_10(Struct, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
		new VirtualVariable<decltype(Struct::_m5)>(offsetof(Struct, Struct::_m5)), \
		new VirtualVariable<decltype(Struct::_m6)>(offsetof(Struct, Struct::_m6)), \
		new VirtualVariable<decltype(Struct::_m7)>(offsetof(Struct, Struct::_m7)), \
		new VirtualVariable<decltype(Struct::_m8)>(offsetof(Struct, Struct::_m8)), \
		new VirtualVariable<decltype(Struct::_m9)>(offsetof(Struct, Struct::_m9)), \
	}))


#define STRUCT_MEMBERS_11(Struct, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
		new VirtualVariable<decltype(Struct::_m5)>(offsetof(Struct, Struct::_m5)), \
		new VirtualVariable<decltype(Struct::_m6)>(offsetof(Struct, Struct::_m6)), \
		new VirtualVariable<decltype(Struct::_m7)>(offsetof(Struct, Struct::_m7)), \
		new VirtualVariable<decltype(Struct::_m8)>(offsetof(Struct, Struct::_m8)), \
		new VirtualVariable<decltype(Struct::_m9)>(offsetof(Struct, Struct::_m9)), \
		new VirtualVariable<decltype(Struct::_m10)>(offsetof(Struct, Struct::_m10)), \
	}))


#define STRUCT_MEMBERS_12(Struct, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
		new VirtualVariable<decltype(Struct::_m5)>(offsetof(Struct, Struct::_m5)), \
		new VirtualVariable<decltype(Struct::_m6)>(offsetof(Struct, Struct::_m6)), \
		new VirtualVariable<decltype(Struct::_m7)>(offsetof(Struct, Struct::_m7)), \
		new VirtualVariable<decltype(Struct::_m8)>(offsetof(Struct, Struct::_m8)), \
		new VirtualVariable<decltype(Struct::_m9)>(offsetof(Struct, Struct::_m9)), \
		new VirtualVariable<decltype(Struct::_m10)>(offsetof(Struct, Struct::_m10)), \
		new VirtualVariable<decltype(Struct::_m11)>(offsetof(Struct, Struct::_m11)), \
	}))


#define STRUCT_MEMBERS_13(Struct, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
		new VirtualVariable<decltype(Struct::_m5)>(offsetof(Struct, Struct::_m5)), \
		new VirtualVariable<decltype(Struct::_m6)>(offsetof(Struct, Struct::_m6)), \
		new VirtualVariable<decltype(Struct::_m7)>(offsetof(Struct, Struct::_m7)), \
		new VirtualVariable<decltype(Struct::_m8)>(offsetof(Struct, Struct::_m8)), \
		new VirtualVariable<decltype(Struct::_m9)>(offsetof(Struct, Struct::_m9)), \
		new VirtualVariable<decltype(Struct::_m10)>(offsetof(Struct, Struct::_m10)), \
		new VirtualVariable<decltype(Struct::_m11)>(offsetof(Struct, Struct::_m11)), \
		new VirtualVariable<decltype(Struct::_m12)>(offsetof(Struct, Struct::_m12)), \
	}))


#define STRUCT_MEMBERS_14(Struct, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12, _m13) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
		new VirtualVariable<decltype(Struct::_m5)>(offsetof(Struct, Struct::_m5)), \
		new VirtualVariable<decltype(Struct::_m6)>(offsetof(Struct, Struct::_m6)), \
		new VirtualVariable<decltype(Struct::_m7)>(offsetof(Struct, Struct::_m7)), \
		new VirtualVariable<decltype(Struct::_m8)>(offsetof(Struct, Struct::_m8)), \
		new VirtualVariable<decltype(Struct::_m9)>(offsetof(Struct, Struct::_m9)), \
		new VirtualVariable<decltype(Struct::_m10)>(offsetof(Struct, Struct::_m10)), \
		new VirtualVariable<decltype(Struct::_m11)>(offsetof(Struct, Struct::_m11)), \
		new VirtualVariable<decltype(Struct::_m12)>(offsetof(Struct, Struct::_m12)), \
		new VirtualVariable<decltype(Struct::_m13)>(offsetof(Struct, Struct::_m13)), \
	}))


#define STRUCT_MEMBERS_15(Struct, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12, _m13, _m14) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
		new VirtualVariable<decltype(Struct::_m5)>(offsetof(Struct, Struct::_m5)), \
		new VirtualVariable<decltype(Struct::_m6)>(offsetof(Struct, Struct::_m6)), \
		new VirtualVariable<decltype(Struct::_m7)>(offsetof(Struct, Struct::_m7)), \
		new VirtualVariable<decltype(Struct::_m8)>(offsetof(Struct, Struct::_m8)), \
		new VirtualVariable<decltype(Struct::_m9)>(offsetof(Struct, Struct::_m9)), \
		new VirtualVariable<decltype(Struct::_m10)>(offsetof(Struct, Struct::_m10)), \
		new VirtualVariable<decltype(Struct::_m11)>(offsetof(Struct, Struct::_m11)), \
		new VirtualVariable<decltype(Struct::_m12)>(offsetof(Struct, Struct::_m12)), \
		new VirtualVariable<decltype(Struct::_m13)>(offsetof(Struct, Struct::_m13)), \
		new VirtualVariable<decltype(Struct::_m14)>(offsetof(Struct, Struct::_m14)), \
	}))


#define STRUCT_MEMBERS_16(Struct, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12, _m13, _m14, _m15) \
	std::move(std::vector<VirtualType*>(\
	{\
		new VirtualVariable<decltype(Struct::_m0)>(offsetof(Struct, Struct::_m0)), \
		new VirtualVariable<decltype(Struct::_m1)>(offsetof(Struct, Struct::_m1)), \
		new VirtualVariable<decltype(Struct::_m2)>(offsetof(Struct, Struct::_m2)), \
		new VirtualVariable<decltype(Struct::_m3)>(offsetof(Struct, Struct::_m3)), \
		new VirtualVariable<decltype(Struct::_m4)>(offsetof(Struct, Struct::_m4)), \
		new VirtualVariable<decltype(Struct::_m5)>(offsetof(Struct, Struct::_m5)), \
		new VirtualVariable<decltype(Struct::_m6)>(offsetof(Struct, Struct::_m6)), \
		new VirtualVariable<decltype(Struct::_m7)>(offsetof(Struct, Struct::_m7)), \
		new VirtualVariable<decltype(Struct::_m8)>(offsetof(Struct, Struct::_m8)), \
		new VirtualVariable<decltype(Struct::_m9)>(offsetof(Struct, Struct::_m9)), \
		new VirtualVariable<decltype(Struct::_m10)>(offsetof(Struct, Struct::_m10)), \
		new VirtualVariable<decltype(Struct::_m11)>(offsetof(Struct, Struct::_m11)), \
		new VirtualVariable<decltype(Struct::_m12)>(offsetof(Struct, Struct::_m12)), \
		new VirtualVariable<decltype(Struct::_m13)>(offsetof(Struct, Struct::_m13)), \
		new VirtualVariable<decltype(Struct::_m14)>(offsetof(Struct, Struct::_m14)), \
		new VirtualVariable<decltype(Struct::_m15)>(offsetof(Struct, Struct::_m15)), \
	}))


#define REGISTER_MEMBERS_1(_m0)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_1(ComponentType, _m0);\
	}
	
	
#define REGISTER_MEMBERS_2(_m0, _m1)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_2(ComponentType, _m0, _m1);\
	}
	
	
	#define REGISTER_MEMBERS_3(_m0, _m1, _m2)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_3(ComponentType, _m0, _m1, _m2);\
	}
	
	
	#define REGISTER_MEMBERS_4(_m0, _m1, _m2, _m3)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_4(ComponentType, _m0, _m1, _m2, _m3);\
	}
	
	
	#define REGISTER_MEMBERS_5(_m0, _m1, _m2, _m3, _m4)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_5(ComponentType, _m0, _m1, _m2, _m3, _m4);\
	}
	
	
	#define REGISTER_MEMBERS_6(_m0, _m1, _m2, _m3, _m4, _m5)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_6(ComponentType, _m0, _m1, _m2, _m3, _m4, _m5);\
	}
	
	
	#define REGISTER_MEMBERS_7(_m0, _m1, _m2, _m3, _m4, _m5, _m6)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_7(ComponentType, _m0, _m1, _m2, _m3, _m4, _m5, _m6);\
	}
	
	
	#define REGISTER_MEMBERS_8(_m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_8(ComponentType, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7);\
	}
	
	
	#define REGISTER_MEMBERS_9(_m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_9(ComponentType, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8);\
	}
	
	
	#define REGISTER_MEMBERS_10(_m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_10(ComponentType, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9);\
	}
	
	
	#define REGISTER_MEMBERS_11(_m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_11(ComponentType, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10);\
	}
	
	
	#define REGISTER_MEMBERS_12(_m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_12(ComponentType, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11);\
	}
	
	
	#define REGISTER_MEMBERS_13(_m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_13(ComponentType, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12);\
	}
	
	
	#define REGISTER_MEMBERS_14(_m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12, _m13)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_14(ComponentType, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12, _m13);\
	}
	
	
	#define REGISTER_MEMBERS_15(_m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12, _m13, _m14)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_15(ComponentType, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12, _m13, _m14);\
	}
	
	
	#define REGISTER_MEMBERS_16(_m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12, _m13, _m14, _m15)\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return STRUCT_MEMBERS_16(ComponentType, _m0, _m1, _m2, _m3, _m4, _m5, _m6, _m7, _m8, _m9, _m10, _m11, _m12, _m13, _m14, _m15);\
	}
	
	
	#define REGISTER_MEMBERS_0()\
	friend class NativeComponent<ComponentType>;\
	static std::vector<VirtualType*> getMembers(AssetID& id)\
	{\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\
		return std::vector<VirtualType*>();\
	}
	
	
	