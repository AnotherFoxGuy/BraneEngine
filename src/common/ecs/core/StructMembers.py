# This is a script to create preprocessors to aid in the creation of native components


filename = "structMembers.h"
maxNativeMembers = 16;

file = open(filename, 'w')

file.write("""// This file was auto generated by StructMembersPreprossesor.py, when making changes to this file, please do it through that script to preserve them


""")

#Preprocessor that creates a vector of types
for numMembers in range(1, maxNativeMembers + 1):
	arguments = ["_m" + str(member) for member in range(numMembers)]

	argumentsStr = ""
	for arg in range(len(arguments)):
		argumentsStr += arguments[arg];
		if arg != numMembers - 1:
			argumentsStr += ", "


	file.write(f"#define STRUCT_MEMBERS_{numMembers}(Struct, {argumentsStr}) \\\n")
	file.write("\tstd::move(std::vector<VirtualType*>(\\\n\t{\\\n")
	for member in arguments:
		file.write(f"\t\tnew VirtualVariable<decltype(Struct::{member})>(offsetof(Struct, Struct::{member})), \\\n")
	file.write("\t}))\n\n\n")

#Preprocessor that creates a getMembers function
for numMembers in range(1, maxNativeMembers + 1):
	arguments = ["_m" + str(member) for member in range(numMembers)]

	argumentsStr = ""
	for arg in range(len(arguments)):
		argumentsStr += arguments[arg];
		if arg != numMembers - 1:
			argumentsStr += ", "

	#f-string can't contain \\ so we're stuck with concating strings
	file.write("""#define REGESTER_MEMBERS_""" + str(numMembers) +"""(""" + argumentsStr + """)\\
	friend class NativeComponent<ComponentType>;\\
	static std::vector<VirtualType*> getMembers(AssetID& id)\\
	{\\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\\
		return STRUCT_MEMBERS_""" + str(numMembers) + """(ComponentType, """ + argumentsStr + """);\\
	}
	
	
	""")

file.write("""#define REGESTER_MEMBERS_0()\\
	friend class NativeComponent<ComponentType>;\\
	static std::vector<VirtualType*> getMembers(AssetID& id)\\
	{\\
		id = AssetID(std::string("localhost/this/component/") + typeid(ComponentType).name());\\
		return std::vector<VirtualType*>();\\
	}
	
	
	""")

file.close()