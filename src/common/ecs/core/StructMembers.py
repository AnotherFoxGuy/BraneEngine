# This is a script to create preprocessors to aid in the creation of native components


filename = "structMembers.h"
maxNativeMembers = 16

file = open(filename, 'w')

file.write("""// This file was auto generated by StructMembers.py, 
// when making changes to this file, please do it through that script to preserve them

extern size_t nativeComponentIDIttr;

""")

# Preprocessor that creates a vector of types
for numMembers in range(1, maxNativeMembers + 1):
    arguments = ["_m" + str(member) for member in range(numMembers)]

    argumentsStr = ""
    for arg in range(len(arguments)):
        argumentsStr += arguments[arg]
        if arg != numMembers - 1:
            argumentsStr += ", "

    file.write(f"#define STRUCT_MEMBERS_{numMembers}(Struct, {argumentsStr}) \\\n")
    file.write("\tstd::move(std::vector<VirtualType*>(\\\n\t{\\\n")
    for member in arguments:
        file.write(f"\t\tnew VirtualVariable<decltype(Struct::{member})>(offsetof(Struct, Struct::{member})), \\\n")
    file.write("\t}))\n\n\n")

# Preprocessor that creates a getMembers function
for numMembers in range(1, maxNativeMembers + 1):
    arguments = ["_m" + str(member) for member in range(numMembers)]

    argumentsStr = ""
    for arg in range(len(arguments)):
        argumentsStr += arguments[arg]
        if arg != numMembers - 1:
            argumentsStr += ", "

    # f-string can't contain \\ so we're stuck with contacting strings
    file.write("""#define REGISTER_MEMBERS_""" + str(numMembers) + "(" + argumentsStr + """)\\
	friend class NativeComponent<ComponentType>;\\
	static std::vector<VirtualType*> getMembers(AssetID& id)\\
	{\\
		id = AssetID("localhost/" + std::to_string(nativeComponentIDIttr++));\\
		return STRUCT_MEMBERS_""" + str(numMembers) + "(ComponentType, " + argumentsStr + """);\\
	}
	
	
	""")

file.write("""#define REGISTER_MEMBERS_0()\\
	friend class NativeComponent<ComponentType>;\\
	static std::vector<VirtualType*> getMembers(AssetID& id)\\
	{\\
		id = AssetID("localhost/" + std::to_string(nativeComponentIDIttr++));\\
		return std::vector<VirtualType*>();\\
	}
	
	
	""")

file.close()
